from tkinter import *
root = Tk()
root.title("Sudoku")
board=[[3, 0, 6, 5, 0, 8, 4, 0, 0],
[5, 2, 0, 0, 0, 0, 0, 0, 0],
[0, 8, 7, 0, 0, 0, 0, 3, 1],
[0, 0, 3, 0, 1, 0, 0, 8, 0],
[9, 0, 0, 8, 6, 3, 0, 0, 5],
[0, 5, 0, 0, 9, 0, 6, 0, 0], 
[1, 3, 0, 0, 0, 0, 2, 5, 0],
[0, 0, 0, 0, 0, 0, 0, 7, 4],
[0, 0, 5, 2, 0, 6, 3, 0, 0] ]

def empty(bo):
    #finds out the empty cell
    for i in range(len(bo)):
        for j in range(len(bo[0])):
            if bo[i][j]==0:
                return(i,j) #row,col
    return None  #if no empty space found
            
def valid(bo,row,col,i):
    if i in bo[row]:  #Checks in the row
        return False
    
    for j in range(len(bo)):  #checks in the col
        if i==bo[j][col] and j!=row:
            return False
        
    x=row//3  #produces 0,1,2
    y=col//3  #produces 0,1,2
    for j in range(x*3,x*3+3):  #checks in the cube
        for k in range(y*3,y*3+3):
            if bo[j][k]==i and (j,k)!=(row,col):
                return False
    return True

def solve(bo):
    if not empty(bo):
        return True
    row,col=empty(bo)
    for i in range(1,10):
        if valid(bo,row,col,i):
            bo[row][col]=i
            if solve(bo):
                return True
            bo[row][col]=0
    return False

def boardd(bo):
    for i in range(len(bo)):
        if i%3==0 and i!=0:
            print("                ")
        for j in range(len(bo[0])):
            if j%3==0 and j!=(len(bo[0])-1):
                print("  ",end="")
            if j==(len(bo[0])-1):
                print(bo[i][j])
            else:
                print(str(bo[i][j])+" ",end="")

def gui(board):
    canvas = Canvas(root, width=450, height=450)
    canvas.grid(row=0, column=0, rowspan=9, columnspan=9)

    entries = []

    cell_size = 50
    offset = cell_size // 2

    for i in range(len(board)):
        row_entries = []
        for j in range(len(board[0])):
            x0 = j * cell_size
            y0 = i * cell_size
            x1 = x0 + cell_size
            y1 = y0 + cell_size

            if board[i][j] == 0:
                entry = Entry(root, width=2, font=("Arial", 18), justify='center')
                entry_window = canvas.create_window(x0 + offset, y0 + offset, window=entry)
                row_entries.append(entry)
            else:
                label = Label(root, text=str(board[i][j]), font=("Arial", 18), width=2, justify='center')
                label_window = canvas.create_window(x0 + offset, y0 + offset, window=label)
                row_entries.append(None)
        entries.append(row_entries)

    for i in range(10):
        width = 3 if i % 3 == 0 else 1
        canvas.create_line(0, i * cell_size, 450, i * cell_size, width=width)
        canvas.create_line(i * cell_size, 0, i * cell_size, 450, width=width)

    def clicked():
        for i in range(len(board)):
            for j in range(len(board[0])):
                if entries[i][j] is not None:
                    value = entries[i][j].get()
                    if value.isdigit() and 1 <= int(value) <= 9:
                        board[i][j] = int(value)
                    else:
                        board[i][j] = 0
        
        if solve(board):
            label1.config(text="Correct")
        else:
            label1.config(text="Incorrect")
    def solve_button_clicked():
        if solve(board):
            for i in range(len(board)):
                for j in range(len(board[0])):
                    if entries[i][j] is not None:
                        entries[i][j].delete(0, END)
                        entries[i][j].insert(0, str(board[i][j]))
        else:
            label1.config(text="No solution found")
    bt1 = Button(root, text="Submit", command=clicked)
    bt1.grid(column=0, row=10, columnspan=5)
    bt2=Button(root,text="Solve",command=solve_button_clicked)
    bt2.grid(column=0, row=10, columnspan=15)
    label1 = Label(root, text="")
    label1.grid(column=3, row=10, columnspan=6)
    root.mainloop()

b=boardd(board)
print("\n")
gui(board)
